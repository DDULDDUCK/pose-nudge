name: 'Publish with Code Signing'

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  publish-tauri:
    # ... (이전 부분은 동일) ...
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
      # ... (의존성 설치 등 다른 스텝들은 동일) ...
      - name: Install Apple Certificate and Keychain
        # ... (이전 답변에서 수정한 코드를 그대로 사용) ...

      - name: Build and Release
        uses: tauri-apps/tauri-action@v0
        id: tauri_build # 👈 스텝에 id를 부여하여 출력값을 참조할 수 있게 합니다.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # ... (다른 env 변수들은 동일) ...
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'App ${{ github.ref_name }}'
          releaseBody: '자세한 릴리즈 노트는 CHANGELOG.md 파일을 참고해주세요.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

      # 👇 [추가] 생성된 에셋을 아티팩트로 업로드하는 스텝
      - name: Upload Release Assets as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-assets-${{ runner.os }}-${{ matrix.args || 'default' }}
          path: |
            ${{ steps.tauri_build.outputs.releaseUploadUrl }}/../*.sig
            ${{ steps.tauri_build.outputs.releaseUploadUrl }}/../*.msi.zip
            ${{ steps.tauri_build.outputs.releaseUploadUrl }}/../*.dmg

  # 태그 기반 릴리즈 시에만 업데이터용 JSON 파일 생성 및 업로드
  publish-updater-json:
    if: startsWith(github.ref, 'refs/tags/')
    needs: publish-tauri
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # 👇 [추가] 아티팩트를 다운로드하는 스텝
      - name: Download all release assets
        uses: actions/download-artifact@v4
        with:
          path: artifacts/ # 모든 아티팩트를 이 디렉토리 아래에 다운로드

      # 👇 [수정] 다운로드한 아티팩트에서 파일 경로를 찾도록 수정
      - name: Generate updater JSON
        id: generate_json
        run: |
          set -e

          # 아티팩트가 os별 디렉토리에 저장되므로 find 명령으로 파일을 찾습니다.
          SIG_WINDOWS=$(cat $(find artifacts -name '*.msi.zip.sig'))
          SIG_MAC_INTEL=$(cat $(find artifacts -name '*.x64.dmg.sig'))
          SIG_MAC_ARM=$(cat $(find artifacts -name '*.aarch64.dmg.sig'))

          # URL은 GitHub 릴리즈 페이지의 구조를 따릅니다.
          # 파일명은 다운로드한 파일에서 가져옵니다.
          URL_WINDOWS="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/$(basename $(find artifacts -name '*.msi.zip'))"
          URL_MAC_INTEL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/$(basename $(find artifacts -name '*.x64.dmg'))"
          URL_MAC_ARM="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/$(basename $(find artifacts -name '*.aarch64.dmg'))"

          # jq를 사용하여 JSON 생성 (이 부분은 동일)
          JSON_CONTENT=$(jq -n \
            --arg version "${{ github.ref_name }}" \
            --arg notes "Release notes for ${{ github.ref_name }}" \
            --arg pub_date "$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
            --arg sig_windows "$SIG_WINDOWS" \
            --arg url_windows "$URL_WINDOWS" \
            --arg sig_mac_intel "$SIG_MAC_INTEL" \
            --arg url_mac_intel "$URL_MAC_INTEL" \
            --arg sig_mac_arm "$SIG_MAC_ARM" \
            --arg url_mac_arm "$URL_MAC_ARM" \
            '{
              "version": $version,
              "notes": $notes,
              "pub_date": $pub_date,
              "platforms": {
                "windows-x86_64": { "signature": $sig_windows, "url": $url_windows },
                "darwin-x86_64": { "signature": $sig_mac_intel, "url": $url_mac_intel },
                "darwin-aarch64": { "signature": $sig_mac_arm, "url": $url_mac_arm }
              }
            }')

          echo "$JSON_CONTENT" > latest.json
          echo "Generated latest.json:"
          cat latest.json
          echo "json_path=latest.json" >> $GITHUB_OUTPUT

      # 👇 gh release upload는 그대로 유지
      - name: Upload updater JSON to release
        run: |
          gh release upload ${{ github.ref_name }} ${{ steps.generate_json.outputs.json_path }} --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}