name: 'Publish with Code Signing'

on:
  workflow_dispatch: # GitHub UI에서 수동으로 실행 가능
  push:
    tags:
      - 'v*' # v로 시작하는 태그가 푸시될 때 자동 실행

jobs:
  publish-tauri:
    # 빌드 및 릴리즈 생성 잡
    permissions:
      contents: write # 릴리즈를 생성하고 에셋을 업로드하기 위해 필요
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin' # Apple Silicon Mac
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin' # Intel Mac
          - platform: 'ubuntu-22.04'
            args: '' # Linux
          - platform: 'windows-latest'
            args: '' # Windows

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu only)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: Install Rust stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          # macOS에서는 두 아키텍처 타겟을 모두 설치
          targets: ${{ runner.os == 'macOS' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install frontend dependencies
        run: npm ci

      - name: Install Apple Certificate and Keychain
        if: runner.os == 'macOS'
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
        run: |
          # 인증서를 파일로 디코딩
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
          # 새로운 키체인 생성 및 기본으로 설정
          security create-keychain -p "temp_keychain_password" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "temp_keychain_password" build.keychain
          # 인증서 가져오기
          security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign
          # 키체인이 자동으로 잠기지 않도록 타임아웃 설정 (2시간)
          security set-keychain-settings -t 7200 -u build.keychain
          # codesign이 키체인에 접근할 때 사용자 확인을 요구하지 않도록 설정
          security set-key-partition-list -S apple-tool:,apple: -s -k "temp_keychain_password" build.keychain > /dev/null

      - name: Build and Create Release
        uses: tauri-apps/tauri-action@v0
        id: tauri_build # 스텝 ID 부여
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Windows 업데이트 서명용 (Tauri Private Key)
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          # macOS 코드 서명 및 공증용
          APPLE_SIGNING_IDENTITY: "Developer ID Application: jaeseok song (A38V4K2DHS)"
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'App ${{ github.ref_name }}'
          releaseBody: '자세한 릴리즈 노트는 CHANGELOG.md 파일을 참고해주세요.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

      - name: Upload Release Assets as Artifacts
        uses: actions/upload-artifact@v4
        with:
          # 아티팩트 이름을 고유하게 만들어 충돌 방지
          name: release-assets-${{ runner.os }}-${{ matrix.arch || 'default' }}
          # tauri-action의 출력 경로를 기반으로 모든 관련 파일을 업로드
          path: |
            ${{ steps.tauri_build.outputs.releasePath }}.*
            ${{ steps.tauri_build.outputs.releasePath }}.*.*

  publish-updater-json:
    # 업데이터 JSON 생성 및 릴리즈에 추가 잡
    if: startsWith(github.ref, 'refs/tags/')
    needs: publish-tauri # publish-tauri 잡이 성공해야 실행
    runs-on: ubuntu-latest
    permissions:
      contents: write # 릴리즈 에셋을 업로드하기 위해 필요
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all release assets from artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/ # 모든 플랫폼의 아티팩트를 이 디렉토리 아래에 다운로드

      - name: Generate updater JSON
        id: generate_json
        run: |
          set -e # 오류 발생 시 즉시 중단

          echo "Searching for files in artifacts directory..."
          ls -R artifacts

          # 아티팩트가 os별 디렉토리에 저장되므로 find 명령으로 파일을 안전하게 찾음
          SIG_WINDOWS=$(cat $(find artifacts -name '*.msi.zip.sig'))
          SIG_MAC_INTEL=$(cat $(find artifacts -name '*.x64.dmg.sig'))
          SIG_MAC_ARM=$(cat $(find artifacts -name '*.aarch64.dmg.sig'))

          # 파일명 기반으로 전체 URL 생성
          URL_WINDOWS="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/$(basename $(find artifacts -name '*.msi.zip'))"
          URL_MAC_INTEL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/$(basename $(find artifacts -name '*.x64.dmg'))"
          URL_MAC_ARM="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/$(basename $(find artifacts -name '*.aarch64.dmg'))"

          # jq를 사용하여 JSON 파일 생성
          JSON_CONTENT=$(jq -n \
            --arg version "${{ github.ref_name }}" \
            --arg notes "Release notes for ${{ github.ref_name }}" \
            --arg pub_date "$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
            --arg sig_windows "$SIG_WINDOWS" \
            --arg url_windows "$URL_WINDOWS" \
            --arg sig_mac_intel "$SIG_MAC_INTEL" \
            --arg url_mac_intel "$URL_MAC_INTEL" \
            --arg sig_mac_arm "$SIG_MAC_ARM" \
            --arg url_mac_arm "$URL_MAC_ARM" \
            '{
              "version": $version,
              "notes": $notes,
              "pub_date": $pub_date,
              "platforms": {
                "windows-x86_64": { "signature": $sig_windows, "url": $url_windows },
                "darwin-x86_64": { "signature": $sig_mac_intel, "url": $url_mac_intel },
                "darwin-aarch64": { "signature": $sig_mac_arm, "url": $url_mac_arm }
              }
            }')

          echo "$JSON_CONTENT" > latest.json
          echo "Generated latest.json:"
          cat latest.json
          echo "json_path=latest.json" >> $GITHUB_OUTPUT

      - name: Upload updater JSON to release
        run: gh release upload ${{ github.ref_name }} ${{ steps.generate_json.outputs.json_path }} --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}