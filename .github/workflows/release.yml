name: 'Publish with Code Signing'

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}

    # 👇 --- [수정된 부분 1] 잡 레벨에서 환경 변수 선언 --- 👇
    env:
      # macOS 서명 및 공증용 시크릿들을 여기서 한번에 불러옵니다.
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
      APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
      APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
      # Windows 서명용
      TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
      TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
      # macOS 인증서
      MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
      MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # ... (Node.js, Rust 설치 등 이전 스텝들은 동일) ...
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: Install Rust stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ runner.os == 'macOS' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}
      
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install frontend dependencies
        run: npm ci

      - name: Install Apple Certificate and Keychain
        if: runner.os == 'macOS'
        # 잡 레벨에서 env를 선언했으므로 여기서 다시 선언할 필요가 없습니다.
        run: |
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "temp_keychain_password" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "temp_keychain_password" build.keychain
          security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
          security set-keychain-settings -t 7200 -u build.keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "temp_keychain_password" build.keychain > /dev/null

      - name: Create Apple API Key file for Notarization
        if: runner.os == 'macOS'
        run: |
          echo -n "$APPLE_API_KEY" > AuthKey.p8
          echo "APPLE_API_KEY_PATH=$(pwd)/AuthKey.p8" >> $GITHUB_ENV

      # 👇 --- [수정된 부분 2] 디버깅 스텝 개선 --- 👇
      - name: Debug Apple Notarization Variables
        if: runner.os == 'macOS'
        run: |
          echo "--- Verifying values passed to workflow ---"
          # 이제 잡 레벨 env를 직접 참조하므로 값이 제대로 보여야 합니다.
          echo "APPLE_ID: $APPLE_ID"
          echo "APPLE_API_KEY_ID: $APPLE_API_KEY_ID"
          echo "APPLE_API_ISSUER: $APPLE_API_ISSUER"
          echo "APPLE_API_KEY_PATH: ${{ env.APPLE_API_KEY_PATH }}"
          
          KEY_ID_LENGTH=$(echo -n "$APPLE_API_KEY_ID" | wc -c)
          echo "Length of APPLE_API_KEY_ID is: $KEY_ID_LENGTH"
          
          if [ -f "${{ env.APPLE_API_KEY_PATH }}" ]; then
            echo "API Key file check: OK"
          else
            echo "API Key file check: FAILED"
          fi
          echo "-------------------------------------------"
          
      # 👇 --- [수정된 부분 3] Build 스텝의 env 블록 간소화 --- 👇
      - name: Build and Create Release
        uses: tauri-apps/tauri-action@v0
        id: tauri_build
        env:
          # 필요한 변수들은 이미 잡 레벨에서 선언되었습니다.
          # GITHUB_TOKEN과 APPLE_API_KEY_PATH만 여기서 추가로 정의합니다.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_SIGNING_IDENTITY: "Developer ID Application: jaeseok song (A38V4K2DHS)"
          APPLE_API_KEY_PATH: ${{ env.APPLE_API_KEY_PATH }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'App ${{ github.ref_name }}'
          releaseBody: '자세한 릴리즈 노트는 CHANGELOG.md 파일을 참고해주세요.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

      - name: Upload Release Assets as Artifacts
        # ... (이후 부분은 동일) ...
        uses: actions/upload-artifact@v4
        with:
          name: release-assets-${{ runner.os }}-${{ matrix.arch || 'default' }}
          path: |
            ${{ steps.tauri_build.outputs.releasePath }}.*
            ${{ steps.tauri_build.outputs.releasePath }}.*.*

  publish-updater-json:
    # ... (이 잡은 변경할 필요 없습니다) ...
    if: startsWith(github.ref, 'refs/tags/')
    needs: publish-tauri
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download all release assets from artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      - name: Generate updater JSON
        id: generate_json
        run: |
          set -e
          echo "Searching for files in artifacts directory..."
          ls -R artifacts
          SIG_WINDOWS=$(cat $(find artifacts -name '*.msi.zip.sig'))
          SIG_MAC_INTEL=$(cat $(find artifacts -name '*.x64.dmg.sig'))
          SIG_MAC_ARM=$(cat $(find artifacts -name '*.aarch64.dmg.sig'))
          URL_WINDOWS="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/$(basename $(find artifacts -name '*.msi.zip'))"
          URL_MAC_INTEL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/$(basename $(find artifacts -name '*.x64.dmg'))"
          URL_MAC_ARM="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/$(basename $(find artifacts -name '*.aarch64.dmg'))"
          JSON_CONTENT=$(jq -n \
            --arg version "${{ github.ref_name }}" \
            --arg notes "Release notes for ${{ github.ref_name }}" \
            --arg pub_date "$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
            --arg sig_windows "$SIG_WINDOWS" \
            --arg url_windows "$URL_WINDOWS" \
            --arg sig_mac_intel "$SIG_MAC_INTEL" \
            --arg url_mac_intel "$URL_MAC_INTEL" \
            --arg sig_mac_arm "$SIG_MAC_ARM" \
            --arg url_mac_arm "$URL_MAC_ARM" \
            '{
              "version": $version,
              "notes": $notes,
              "pub_date": $pub_date,
              "platforms": {
                "windows-x86_64": { "signature": $sig_windows, "url": $url_windows },
                "darwin-x86_64": { "signature": $sig_mac_intel, "url": $url_mac_intel },
                "darwin-aarch64": { "signature": $sig_mac_arm, "url": $url_mac_arm }
              }
            }')
          echo "$JSON_CONTENT" > latest.json
          echo "Generated latest.json:"
          cat latest.json
          echo "json_path=latest.json" >> $GITHUB_OUTPUT
      - name: Upload updater JSON to release
        run: gh release upload ${{ github.ref_name }} ${{ steps.generate_json.outputs.json_path }} --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}