name: 'Publish with Code Signing'

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu only)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ runner.os == 'macOS' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install frontend dependencies
        run: npm ci

      - name: Install Apple Certificate and Keychain
        if: runner.os == 'macOS'
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
        run: |
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "temp_keychain_password" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "temp_keychain_password" build.keychain
          security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "temp_keychain_password" build.keychain

      - name: Build and Release
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          APPLE_SIGNING_IDENTITY: "Developer ID Application: jaeseok song (A38V4K2DHS)" # 직접 작성하는 방식 권장
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'App ${{ github.ref_name }}'
          releaseBody: '자세한 릴리즈 노트는 CHANGELOG.md 파일을 참고해주세요.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

  # 태그 기반 릴리즈 시에만 업데이터용 JSON 파일 생성 및 업로드
  publish-updater-json:
    if: startsWith(github.ref, 'refs/tags/')
    needs: publish-tauri
    runs-on: ubuntu-latest
    permissions:
      contents: write # 릴리즈 에셋을 업로드하기 위해
    steps:
      - name: Download signature files
        run: |
          # 1. 효율적으로 .sig 파일과 .zip 파일(윈도우)만 다운로드
          gh release download ${{ github.ref_name }} --pattern "*.sig"
          gh release download ${{ github.ref_name }} --pattern "*.msi.zip"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate updater JSON
        id: generate_json
        run: |
          set -e # 오류 발생 시 즉시 중단

          # 플랫폼별로 서명 파일 내용 읽기
          SIG_WINDOWS=$(cat *.msi.zip.sig)
          SIG_MAC_INTEL=$(cat *.x64.dmg.sig)
          SIG_MAC_ARM=$(cat *.aarch64.dmg.sig)

          # 다운로드 URL 생성 (파일을 직접 다운로드할 필요 없이 이름만으로 URL 구성)
          # 'ls' 명령으로 파일명을 찾아 URL을 만듭니다.
          URL_WINDOWS="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/$(basename *.msi.zip)"
          # macOS .dmg 파일은 다운로드하지 않았지만, .sig 파일 이름에서 유추하여 URL을 만듭니다.
          URL_MAC_INTEL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/$(basename *.x64.dmg.sig .sig)"
          URL_MAC_ARM="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/$(basename *.aarch64.dmg.sig .sig)"

          # jq를 사용하여 새로운 JSON 파일 생성
          JSON_CONTENT=$(jq -n \
            --arg version "${{ github.ref_name }}" \
            --arg notes "Release notes for ${{ github.ref_name }}" \
            --arg pub_date "$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
            --arg sig_windows "$SIG_WINDOWS" \
            --arg url_windows "$URL_WINDOWS" \
            --arg sig_mac_intel "$SIG_MAC_INTEL" \
            --arg url_mac_intel "$URL_MAC_INTEL" \
            --arg sig_mac_arm "$SIG_MAC_ARM" \
            --arg url_mac_arm "$URL_MAC_ARM" \
            '{
              "version": $version,
              "notes": $notes,
              "pub_date": $pub_date,
              "platforms": {
                "windows-x86_64": { "signature": $sig_windows, "url": $url_windows },
                "darwin-x86_64": { "signature": $sig_mac_intel, "url": $url_mac_intel },
                "darwin-aarch64": { "signature": $sig_mac_arm, "url": $url_mac_arm }
              }
            }')

          echo "$JSON_CONTENT" > latest.json
          echo "Generated latest.json:"
          cat latest.json
          echo "json_path=latest.json" >> $GITHUB_OUTPUT

      - name: Upload updater JSON to release
        run: |
          gh release upload ${{ github.ref_name }} ${{ steps.generate_json.outputs.json_path }} --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}